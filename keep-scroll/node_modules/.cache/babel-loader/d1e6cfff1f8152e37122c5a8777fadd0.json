{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useLayoutEffect, useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nexport default function useKeepPositionScroll() {\n  _s();\n\n  let location = useLocation();\n  const [scrollTop, setScrollTop] = useState(0);\n  const [isScroll, setIsScroll] = useState(false);\n  useEffect(() => {\n    let newScrollPosition = [];\n    const scrollPosition = JSON.parse(sessionStorage.getItem(\"scroll-position\")) || [];\n    const id = scrollPosition.findIndex(v => v.pathname === location.pathname);\n    console.log(id);\n\n    if (id !== -1) {\n      if (!isScroll) window.scrollTo(0, scrollPosition[id].position);\n      newScrollPosition = [...scrollPosition];\n      newScrollPosition.splice(id, 1, {\n        pathname: location.pathname,\n        position: scrollTop\n      });\n      sessionStorage.setItem(\"scroll-position\", JSON.stringify(newScrollPosition));\n      return;\n    }\n\n    newScrollPosition = [...scrollPosition, {\n      pathname: location.pathname,\n      position: 0\n    }];\n    sessionStorage.setItem(\"scroll-position\", JSON.stringify(newScrollPosition));\n  }, [scrollTop, location.pathname, isScroll]);\n\n  const windowScrollTop = () => {\n    const position = window.pageYOffset;\n    setIsScroll(true);\n    console.log(\"hjhsdjhfjkd\");\n    setScrollTop(position);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", windowScrollTop);\n    return () => window.removeEventListener(\"scroll\", windowScrollTop);\n  }, []);\n  return location;\n}\n\n_s(useKeepPositionScroll, \"or+nh6WVB9NUukZR+UCE8iE4Avs=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/github/react-func/keep-scroll/src/hooks/useKeepPositionScroll.js"],"names":["useState","useEffect","useLayoutEffect","useMemo","useLocation","useKeepPositionScroll","location","scrollTop","setScrollTop","isScroll","setIsScroll","newScrollPosition","scrollPosition","JSON","parse","sessionStorage","getItem","id","findIndex","v","pathname","console","log","window","scrollTo","position","splice","setItem","stringify","windowScrollTop","pageYOffset","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,eAA9B,EAA+CC,OAA/C,QAA8D,OAA9D;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,eAAe,SAASC,qBAAT,GAAiC;AAAA;;AAC9C,MAAIC,QAAQ,GAAGF,WAAW,EAA1B;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,iBAAiB,GAAG,EAAxB;AACA,UAAMC,cAAc,GAClBC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,iBAAvB,CAAX,KAAyD,EAD3D;AAGA,UAAMC,EAAE,GAAGL,cAAc,CAACM,SAAf,CACRC,CAAD,IAAOA,CAAC,CAACC,QAAF,KAAed,QAAQ,CAACc,QADtB,CAAX;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;;AAEA,QAAIA,EAAE,KAAK,CAAC,CAAZ,EAAe;AACb,UAAI,CAACR,QAAL,EAAec,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmBZ,cAAc,CAACK,EAAD,CAAd,CAAmBQ,QAAtC;AAEfd,MAAAA,iBAAiB,GAAG,CAAC,GAAGC,cAAJ,CAApB;AACAD,MAAAA,iBAAiB,CAACe,MAAlB,CAAyBT,EAAzB,EAA6B,CAA7B,EAAgC;AAC9BG,QAAAA,QAAQ,EAAEd,QAAQ,CAACc,QADW;AAE9BK,QAAAA,QAAQ,EAAElB;AAFoB,OAAhC;AAKAQ,MAAAA,cAAc,CAACY,OAAf,CACE,iBADF,EAEEd,IAAI,CAACe,SAAL,CAAejB,iBAAf,CAFF;AAKA;AACD;;AAEDA,IAAAA,iBAAiB,GAAG,CAClB,GAAGC,cADe,EAElB;AACEQ,MAAAA,QAAQ,EAAEd,QAAQ,CAACc,QADrB;AAEEK,MAAAA,QAAQ,EAAE;AAFZ,KAFkB,CAApB;AAQAV,IAAAA,cAAc,CAACY,OAAf,CACE,iBADF,EAEEd,IAAI,CAACe,SAAL,CAAejB,iBAAf,CAFF;AAID,GAxCQ,EAwCN,CAACJ,SAAD,EAAYD,QAAQ,CAACc,QAArB,EAA+BX,QAA/B,CAxCM,CAAT;;AA0CA,QAAMoB,eAAe,GAAG,MAAM;AAC5B,UAAMJ,QAAQ,GAAGF,MAAM,CAACO,WAAxB;AACApB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAd,IAAAA,YAAY,CAACiB,QAAD,CAAZ;AACD,GALD;;AAOAxB,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCF,eAAlC;AACA,WAAO,MAAMN,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCH,eAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAOvB,QAAP;AACD;;GA5DuBD,qB;UACPD,W","sourcesContent":["import { useState, useEffect, useLayoutEffect, useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function useKeepPositionScroll() {\n  let location = useLocation();\n  const [scrollTop, setScrollTop] = useState(0);\n  const [isScroll, setIsScroll] = useState(false);\n\n  useEffect(() => {\n    let newScrollPosition = [];\n    const scrollPosition =\n      JSON.parse(sessionStorage.getItem(\"scroll-position\")) || [];\n\n    const id = scrollPosition.findIndex(\n      (v) => v.pathname === location.pathname\n    );\n\n    console.log(id);\n\n    if (id !== -1) {\n      if (!isScroll) window.scrollTo(0, scrollPosition[id].position);\n\n      newScrollPosition = [...scrollPosition];\n      newScrollPosition.splice(id, 1, {\n        pathname: location.pathname,\n        position: scrollTop,\n      });\n\n      sessionStorage.setItem(\n        \"scroll-position\",\n        JSON.stringify(newScrollPosition)\n      );\n\n      return;\n    }\n\n    newScrollPosition = [\n      ...scrollPosition,\n      {\n        pathname: location.pathname,\n        position: 0,\n      },\n    ];\n\n    sessionStorage.setItem(\n      \"scroll-position\",\n      JSON.stringify(newScrollPosition)\n    );\n  }, [scrollTop, location.pathname, isScroll]);\n\n  const windowScrollTop = () => {\n    const position = window.pageYOffset;\n    setIsScroll(true);\n    console.log(\"hjhsdjhfjkd\");\n    setScrollTop(position);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", windowScrollTop);\n    return () => window.removeEventListener(\"scroll\", windowScrollTop);\n  }, []);\n\n  return location;\n}\n"]},"metadata":{},"sourceType":"module"}